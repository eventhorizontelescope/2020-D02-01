##### THIS FILE CONTAINS INPUTS THAT SHOULD BE SET #####
##### WHEN A DIFFERENT ARRAY, DIFFERENT FREQUENCY, #####
##### OR DIFFERENT CALIBRATION STRATEGY IS USED    #####


#Which array to calibrate.
#Different arrays/frequencies require different calibration stragies.
#These are employed via different blocks of code in the main file of the pipeline.
#See keys of array_specific_steps in main_picard.py for allowed values.
array_type = EHT

#Reference antennas for phase calibration.
#Can give a single antenna name to only work with scans where that antenna is present.
#Or, a list ant1, ant2, ant3,... can be specified. In that case, ant2 will be used when ant1
#dropped out, ant3 will be used when ant1 and ant2 are not present, and so on.
#If ='pick', the most redundant antennas across all scans will simply be picked (not recommended).
refant = AA,LM,AP,AZ,PV


### Fringe fitting parameters. ###

#FFT search windows for the various fringe-fiting stages
#Set to None for no windowing (full Nyquist).
#Else, the windows must be given as minval;maxval (for example =-300;350) or as a fraction<1 whichs
#will be used as fraction*full_Nyquist_range (for example =0.1 for [-0.1Nyquist,+0.1Nyquist]).
#Delay windows are in nanoseconds and rate windows are in picoseconds/second.
# - fringe_*_window_initial applies to task_fringefit_single, task_fringefit_multi_cal_coher,
#   task_fringefit_multi_cal_short, task_fringefit_solint_cal, and task_fringefit_multi_sci_long.
# - fringe_*_window_mb_sci_short_long applies to task_fringefit_solint_sci and
#   task_fringefit_multi_sci_short.
#See rpicard_documentation on 'Fringe-fitting' for more info.
fringe_delay_window_initial = -150;150
fringe_rate_window_initial = -10;10
fringe_delay_window_mb_sci_short = 0.01
fringe_rate_window_mb_sci_short = 0.05

#Search range for optimal fringe-fit solution intervals for intra-scan atmopsheric effects for
#calibrator sources (_cal) and science targets (_sci).
#It may be useful to solve for fringes on short timescales for the bright calibrators and to use
#longer timescales for the weaker science targets.
#These solints will be used for steps where fringe_solint_* is set to 'coherence' (see above).
#Can give two numbers [min,max], to generate a list of possible solution intervals in steps of
#the accumulation period between min and max (e.g., =10;20).
#If floating_fringe_solint is set to True in constants.inp, this list will be moslty reduced to
#numbers that evenly divide scans.
#Or, a list of more than two numbers can be given (e.g., =5;10;30;120;300). In that case only the
#numbers given will be strictly searched.
#For each scan, the optimal solution interval for fringe-fitting will be determined:
#The search will try to find a solint value for the most detections and the optimal SNR based on
#fft_solint_estimation (see below) within the coherence time of as most baslines as possible.
fringe_solint_optimize_search_cal = 0.0001;2;3;4;5;6;7;8;9;10;15
fringe_solint_optimize_search_sci = 0.0001;2;3;4;5;6;7;8;9;10;15

#Fringe-fitting solution intervals to be searched over for a re-iteration for detections.
#After multiband fringe-fitting, for each scan and antenna where no fringes were found
#for a given solution interval, the solints given in a list here are also searched.
#If fringes are found, the orgininal failed solutions for the given
#scans and antennas are replaced. Useful for mm VLBI where the sensitive stations should be
#calibrated on short timescales, while small dishes at low elevation may need longer solints.
#Determines non-detections based on the output of the last task_fringefit_solint_*() run.
#The resulting delay solutions will always be smoothed to a single value per scan.
#Example: 60;120;180;240;300
#Set to None to disable this feature.
fringe_solint_mb_reiterate = 30;60;180;300

### End of fringe parameters.  ###
